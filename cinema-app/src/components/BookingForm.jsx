// src/components/BookingForm.jsx
import React, { useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import BookingService from '../services/BookingService';
import { toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

const BookingForm = ({ selectedSeats = [], movieTitle = '', moviePrice = 0, onConfirm, onBack }) => {
  const { id } = useParams();
  const navigate = useNavigate();
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    phone: '',
    showtime: '20:00'
  });

  const [errors, setErrors] = useState({});
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
    if (errors[name]) {
      setErrors(prev => ({ ...prev, [name]: '' }));
    }
  };

  const validateForm = () => {
    const newErrors = {};

    if (!formData.name.trim()) {
      newErrors.name = "–Ü–º'—è –æ–±–æ–≤'—è–∑–∫–æ–≤–µ";
    }
    if (!formData.email.trim()) {
      newErrors.email = "Email –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π";
    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
      newErrors.email = "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç email";
    }
    if (!formData.phone.trim()) {
      newErrors.phone = "–¢–µ–ª–µ—Ñ–æ–Ω –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π";
    } else if (!/^[+]?[(]?[\d\s\-()]{10,}$/.test(formData.phone)) {
      newErrors.phone = "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω—É";
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) {
      toast.error("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–ø—Ä–∞–≤—Ç–µ –ø–æ–º–∏–ª–∫–∏ —É —Ñ–æ—Ä–º—ñ", {
        position: "top-right",
        autoClose: 3000,
      });
      return;
    }

    setIsSubmitting(true);

    try {
      const bookingData = {
        ...formData,
        seats: selectedSeats.map(s => s.id),
        totalPrice: selectedSeats.length * moviePrice
      };

      // –ü–æ–∫–∞–∑—É—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ –ø—Ä–æ—Ü–µ—Å—É
      const loadingToast = toast.loading("–û–±—Ä–æ–±–∫–∞ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è...", {
        position: "top-right",
      });

      // –°–∏–º—É–ª—é—î–º–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É –æ–ø–µ—Ä–∞—Ü—ñ—é –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
      await new Promise(resolve => setTimeout(resolve, 1500));

      const result = BookingService.saveBooking(id, bookingData.seats, {
        name: formData.name,
        email: formData.email,
        phone: formData.phone,
        showtime: formData.showtime,
        totalPrice: bookingData.totalPrice
      });

      // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ loading toast
      toast.dismiss(loadingToast);

      if (result.success) {
        // –£—Å–ø—ñ—à–Ω–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
        toast.success(
          <div>
            <strong>–î—è–∫—É—î–º–æ –∑–∞ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è, {formData.name}!</strong>
            <br />
            <small>–ú—ñ—Å—Ü—è: {selectedSeats.map(s => s.id).join(', ')}</small>
            <br />
            <small>–°—É–º–∞: {bookingData.totalPrice} –≥—Ä–Ω</small>
          </div>, 
          {
            position: "top-right",
            autoClose: 5000,
            hideProgressBar: false,
            closeOnClick: true,
            pauseOnHover: true,
            draggable: true,
          }
        );

        // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ email –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è (—Å–∏–º—É–ª—è—Ü—ñ—è)
        setTimeout(() => {
          toast.info(`üìß –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞ ${formData.email}`, {
            position: "bottom-right",
            autoClose: 4000,
          });
        }, 1000);

        if (onConfirm) {
          onConfirm(bookingData);
        }

        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥–∏
        setTimeout(() => {
          navigate('/');
        }, 2000);

      } else {
        throw new Error(result.error || '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—ñ');
      }

    } catch (error) {
      console.error('Booking error:', error);
      toast.error(
        <div>
          <strong>–ü–æ–º–∏–ª–∫–∞ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è!</strong>
          <br />
          <small>{error.message || '–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑'}</small>
        </div>,
        {
          position: "top-right",
          autoClose: 5000,
        }
      );
    } finally {
      setIsSubmitting(false);
    }
  };

  const totalPrice = selectedSeats.length * moviePrice;

  return (
    <div className="booking-form-overlay">
      <div className="booking-form-modal">
        <div className="booking-form-header">
          <h2>–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –∫–≤–∏—Ç–∫—ñ–≤ –¥–ª—è {movieTitle}</h2>
          <button onClick={onBack} className="close-btn">√ó</button>
        </div>

        <div className="selected-seats-info">
          <h3>–í–∏–±—Ä–∞–Ω—ñ –º—ñ—Å—Ü—è:</h3>
          <div className="seats-list">
            {selectedSeats.map(seat => (
              <span key={seat.id} className="selected-seat-badge">
                {seat.id}
              </span>
            ))}
          </div>
          <p>–¶—ñ–Ω–∞ –∑–∞ –∫–≤–∏—Ç–æ–∫: {moviePrice} –≥—Ä–Ω</p>
          <p>–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {totalPrice} –≥—Ä–Ω</p>
        </div>

        <form onSubmit={handleSubmit} className="booking-form">
          <div className="form-group">
            <label>–ü–æ–≤–Ω–µ —ñ–º'—è *</label>
            <input
              type="text"
              name="name"
              value={formData.name}
              onChange={handleInputChange}
              className={errors.name ? 'error' : ''}
              placeholder="–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤–Ω–µ —ñ–º'—è"
              disabled={isSubmitting}
            />
            {errors.name && <span className="error-message">{errors.name}</span>}
          </div>

          <div className="form-group">
            <label>Email *</label>
            <input
              type="email"
              name="email"
              value={formData.email}
              onChange={handleInputChange}
              className={errors.email ? 'error' : ''}
              placeholder="example@email.com"
              disabled={isSubmitting}
            />
            {errors.email && <span className="error-message">{errors.email}</span>}
          </div>

          <div className="form-group">
            <label>–¢–µ–ª–µ—Ñ–æ–Ω *</label>
            <input
              type="tel"
              name="phone"
              value={formData.phone}
              onChange={handleInputChange}
              className={errors.phone ? 'error' : ''}
              placeholder="+380XXXXXXXXX"
              disabled={isSubmitting}
            />
            {errors.phone && <span className="error-message">{errors.phone}</span>}
          </div>

          <div className="form-group">
            <label>–ß–∞—Å —Å–µ–∞–Ω—Å—É</label>
            <select 
              name="showtime" 
              value={formData.showtime} 
              onChange={handleInputChange}
              disabled={isSubmitting}
            >
              <option value="14:00">14:00</option>
              <option value="17:00">17:00</option>
              <option value="20:00">20:00</option>
              <option value="22:30">22:30</option>
            </select>
          </div>

          <div className="form-actions">
            <button 
              type="button" 
              className="btn-cancel" 
              onClick={onBack}
              disabled={isSubmitting}
            >
              –°–∫–∞—Å—É–≤–∞—Ç–∏
            </button>
            <button 
              type="submit" 
              className="btn-submit"
              disabled={isSubmitting}
            >
              {isSubmitting ? '–û–±—Ä–æ–±–∫–∞...' : `–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ (${totalPrice} –≥—Ä–Ω)`}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default BookingForm;